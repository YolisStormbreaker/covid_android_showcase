<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ScreenGeneratorConfiguration">
    <option name="settings">
      <Settings>
        <option name="screenElements">
          <list>
            <ScreenElement>
              <option name="fileNameTemplate" value="%componentLowerCase%_%screenNameSnakeCase%" />
              <option name="fileType" value="Layout XML" />
              <option name="name" value="layout" />
              <option name="template" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;layout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&gt;&#10;&#10;&#9;&lt;data&gt;&#10;&#9;&#9;&lt;variable&#10;&#9;&#9;&#9;name=&quot;viewModel&quot;&#10;&#9;&#9;&#9;type=&quot;%packageName%.%screenName%ViewModel&quot; /&gt;&#10;&#9;&lt;/data&gt;&#10;&#10;&#9;&lt;androidx.constraintlayout.widget.ConstraintLayout&#10;&#9;&#9;android:layout_width=&quot;match_parent&quot;&#10;&#9;&#9;android:layout_height=&quot;match_parent&quot;&gt;&#10;&#10;&#9;&lt;/androidx.constraintlayout.widget.ConstraintLayout&gt;&#10;&lt;/layout&gt;" />
            </ScreenElement>
            <ScreenElement>
              <option name="fileNameTemplate" value="%screenName%%screenElement%" />
              <option name="name" value="Fragment" />
              <option name="template" value="package %packageName%&#10;&#10;import android.os.Bundle&#10;import android.view.LayoutInflater&#10;import android.view.View&#10;import android.view.ViewGroup&#10;import androidx.databinding.DataBindingUtil&#10;import androidx.fragment.app.Fragment&#10;import androidx.lifecycle.ViewModelProvider&#10;&#10;class %screenName%%screenElement% : Fragment() {&#10;&#10;    override fun onCreateView(&#10;            inflater: LayoutInflater,&#10;            container: ViewGroup?,&#10;            savedInstanceState: Bundle?&#10;    ): View? {&#10;&#10;        val binding : %screenName%LayoutBinding = DataBindingUtil.inflate(inflater, R.layout.%screenNameSnakeCase%_layout, container, false)&#10;&#10;        val application = requireNotNull(this.activity).application&#10;&#10;        val viewModelFactory =  %screenName%ViewModelFactory(application)&#10;&#10;        val viewModel = ViewModelProvider(this, viewModelFactory).get( %screenName%ViewModel::class.java)&#10;&#10;        binding.lifecycleOwner = this&#10;&#10;        setHasOptionsMenu(true)&#10;&#10;        return binding.root&#10;    }&#10;}" />
            </ScreenElement>
            <ScreenElement>
              <option name="fileNameTemplate" value="%screenName%%screenElement%" />
              <option name="name" value="ViewModel" />
              <option name="template" value="package %packageName%&#10;&#10;import android.app.Application&#10;import androidx.lifecycle.AndroidViewModel&#10;&#10;class %screenName%%screenElement% (&#10;application: Application&#10;) : AndroidViewModel(application) {&#10;&#10;}" />
            </ScreenElement>
            <ScreenElement>
              <option name="fileNameTemplate" value="%screenName%%screenElement%" />
              <option name="name" value="ViewModelFactory" />
              <option name="template" value="package %packageName%&#10;&#10;import android.app.Application&#10;import androidx.lifecycle.ViewModel&#10;import androidx.lifecycle.ViewModelProvider&#10;&#10;class %screenName%%screenElement% (&#10;private val application: Application&#10;) : ViewModelProvider.Factory {&#10;    override fun &lt;T : ViewModel?&gt; create(modelClass: Class&lt;T&gt;): T {&#10;        if (modelClass.isAssignableFrom(%screenName%ViewModel::class.java)) {&#10;            return %screenName%ViewModel(application) as T&#10;        }&#10;        throw IllegalArgumentException(&quot;Unknown ViewModel class&quot;)&#10;    }&#10;}" />
            </ScreenElement>
            <ScreenElement>
              <option name="fileNameTemplate" value="%screenName%%screenElement%" />
              <option name="name" value="Repository" />
              <option name="template" value="package %packageName%&#10;&#10;class %screenName%%screenElement% private constructor(&#10;) {&#10;&#10;    companion object {&#10;&#10;        //Для Singleton&#10;        @Volatile&#10;        private var instance: %screenName%%screenElement%? = null&#10;&#10;        fun getInstance() =&#10;                instance ?: synchronized(this) {&#10;                    instance ?: %screenName%%screenElement%().also { instance = it }&#10;                }&#10;&#10;    }&#10;&#10;}" />
            </ScreenElement>
          </list>
        </option>
      </Settings>
    </option>
  </component>
</project>